buildscript {
	ext {
		kotlinVersion = '1.0.3'
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
	}
}
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'


jar {
	baseName = 'demo-jasper'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/' }
	maven { url 'http://jasperreports.sourceforge.net/maven2' }

}
configurations.create('jasperreports')
configurations {
	jasperreports {
		transitive = true
	}
}



dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	compile 'net.sf.jasperreports:jasperreports:6.2.0'
	compile 'org.codehaus.groovy:groovy-all:2.3.6'
	jasperreports 'net.sf.jasperreports:jasperreports:6.2.0',
			'org.codehaus.groovy:groovy-all:2.3.6'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

//sourceSets {
//	jasper {
//		srcDir = file(relativePath('src/main/resources/reports'))
//		classesDir = srcDir
//	}
//}

gradle.projectsEvaluated {
	processResources.dependsOn(compileJasperReports)
	//classes.dependsOn compileJasperReports

}
task compileJasperReports {
	def jasperSourceDir = file('src/main/jasperreports')
	ant {
//		java(classname: 'net.sf.jasperreports.view.JasperDesignViewer',fork:true,classpath: configurations.jasperreports.asPath){
//			classpath(path: sourceSets.main.output.classesDir)
//			arg(value: '**/*.jasper')
//		}
		taskdef(name: 'jrc', classname: 'net.sf.jasperreports.ant.JRAntCompileTask', classpath: configurations.jasperreports.asPath)
		sourceSets.main.output.classesDir.mkdirs()
		jrc(srcdir: jasperSourceDir, destdir: sourceSets.main.output.classesDir) {
			classpath(path: sourceSets.main.output.classesDir)
			include(name: '**/*.jrxml')
		}



	}
}
